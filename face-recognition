{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:14: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:14: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<ipython-input-1-eb10022b8900>:14: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  if img is ():\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "Dataset Generated\n"
     ]
    }
   ],
   "source": [
    "#loading pre-trained face detecting model\n",
    "import cv2\n",
    "import numpy as np\n",
    "face_det = cv2.CascadeClassifier(\"haarcascade_frontalface_default.xml\")\n",
    "\n",
    "#Activating my webcam\n",
    "cap = cv2.VideoCapture(0)  \n",
    "\n",
    "#defining a function to detect and extract cropped faces\n",
    "def face_ext(image):\n",
    "    img_gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n",
    "    img = face_det.detectMultiScale(img_gray, 1.3, 5)\n",
    "    \n",
    "    if img is ():\n",
    "        return None\n",
    "    \n",
    "    for (x,y,w,h) in img:\n",
    "        crop_face = image[y:y+h, x:x+w]\n",
    "    \n",
    "    return crop_face\n",
    "  \n",
    "#Creating dataset for training model for face detection\n",
    "i=0\n",
    "Training_Data, Labels = [], []\n",
    "while i<150:\n",
    "    ret, photo = cap.read()\n",
    "    if face_ext(photo) is not None:\n",
    "        face = cv2.resize(face_ext(photo),(200, 200))\n",
    "        face = cv2.cvtColor(face,cv2.COLOR_BGR2GRAY)\n",
    "        \n",
    "        Training_Data.append(np.asarray(face, dtype=np.uint8))\n",
    "        Labels.append(i)\n",
    "        i += 1\n",
    "        \n",
    "       \n",
    "        \n",
    "        #displaying the dataset\n",
    "        cv2.putText(face, str(i), (50, 50), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)\n",
    "        cv2.imshow('Gathering Training Data', face)\n",
    "    else:\n",
    "        print(\"No face found\")\n",
    "        pass\n",
    "    if cv2.waitKey(1)==13:\n",
    "        break\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "Labels = np.asarray(Labels, dtype=np.int32)\n",
    "print(\"Dataset Generated\")\n",
    "    \n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model trained sucessefully\n"
     ]
    }
   ],
   "source": [
    "model  = cv2.face_LBPHFaceRecognizer.create() \n",
    "model.train(np.asarray(Training_Data), np.asarray(Labels))\n",
    "print(\"Model trained sucessefully\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<ipython-input-3-873a8a870623>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  if faces is ():\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Email sent Successfully!\n"
     ]
    }
   ],
   "source": [
    "#Testing face recognition model \n",
    "import os\n",
    "import pywhatkit as bot\n",
    "def face_detector(img, size=0.5):\n",
    "    \n",
    "    # Convert image to grayscale\n",
    "    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "    faces = face_det.detectMultiScale(gray, 1.3, 5)\n",
    "    if faces is ():\n",
    "        return img, []\n",
    "    \n",
    "    \n",
    "    for (x,y,w,h) in faces:\n",
    "        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),2)\n",
    "        roi = img[y:y+h, x:x+w]\n",
    "        roi = cv2.resize(roi, (200, 200))\n",
    "    return img, roi\n",
    "\n",
    "\n",
    "# Open Webcam\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "while True:\n",
    "\n",
    "    ret, frame = cap.read()\n",
    "    image, face = face_detector(frame)\n",
    "    try:\n",
    "        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "        results = model.predict(face)\n",
    "        \n",
    "        if results[1] < 500:\n",
    "            confidence = int( 100 * (1 - (results[1])/400) )\n",
    "            disp_text = str(confidence) + '% Confident it is User'\n",
    "            \n",
    "        cv2.putText(image, disp_text, (100, 120), cv2.FONT_HERSHEY_COMPLEX, 1, (255,100,100), 2)\n",
    "        \n",
    "        if confidence > 90:\n",
    "            cv2.putText(image, \"Hey Sachin\", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,255), 2)\n",
    "            cv2.imshow('Face Recognition', image )\n",
    "        \n",
    "        else:\n",
    "            cv2.putText(image, \"Not sure who you are\", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,255), 2)\n",
    "            cv2.imshow('Face Recognition', image )\n",
    "\n",
    "    except:\n",
    "        cv2.putText(image, \"No Face Detected\", (220, 120) , cv2.FONT_HERSHEY_COMPLEX, 1, (0,111,255), 2)\n",
    "        cv2.putText(image, \"Looking for a face\", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,255), 2)\n",
    "        cv2.imshow('Face Recognition', image )\n",
    "        pass\n",
    "        \n",
    "    if cv2.waitKey(1) == 13:\n",
    "        break\n",
    "    \n",
    "        \n",
    "cap.release()\n",
    "cv2.destroyAllWindows()  \n",
    "\n",
    "#Sending an Email and Whatsapp Alert if face is recognized\n",
    "if confidence>90:\n",
    "    bot.send_mail('berohit40@gmail.com', '<password of email>',\"Alert\", \"Your face was recognized\",'muditmathur121@gmail.com')\n",
    "    bot.sendwhatmsg_instantly(\"+91 9664343800\",\"Your face recognition was successful \")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
285 ...ognition-main/Task 6-Launching an EC2 Instance and attaching a 5gb ebs volume to it.ipynb
@@ -0,0 +1,285 @@
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:14: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:14: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<ipython-input-1-eb10022b8900>:14: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  if img is ():\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "No face found\n",
      "Dataset Generated\n"
     ]
    }
   ],
   "source": [
    "#loading pre-trained face detecting model\n",
    "import cv2\n",
    "import numpy as np\n",
    "face_det = cv2.CascadeClassifier(\"haarcascade_frontalface_default.xml\")\n",
    "\n",
    "#Activating my webcam\n",
    "cap = cv2.VideoCapture(0)  \n",
    "\n",
    "#defining a function to detect and extract cropped faces\n",
    "def face_ext(image):\n",
    "    img_gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n",
    "    img = face_det.detectMultiScale(img_gray, 1.3, 5)\n",
    "    \n",
    "    if img is ():\n",
    "        return None\n",
    "    \n",
    "    for (x,y,w,h) in img:\n",
    "        crop_face = image[y:y+h, x:x+w]\n",
    "    \n",
    "    return crop_face\n",
    "  \n",
    "#Creating dataset for training model for face detection\n",
    "i=0\n",
    "Training_Data, Labels = [], []\n",
    "while i<150:\n",
    "    ret, photo = cap.read()\n",
    "    if face_ext(photo) is not None:\n",
    "        face = cv2.resize(face_ext(photo),(200, 200))\n",
    "        face = cv2.cvtColor(face,cv2.COLOR_BGR2GRAY)\n",
    "        \n",
    "        Training_Data.append(np.asarray(face, dtype=np.uint8))\n",
    "        Labels.append(i)\n",
    "        i += 1\n",
    "        \n",
    "       \n",
    "        \n",
    "        #displaying the dataset\n",
    "        cv2.putText(face, str(i), (50, 50), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2)\n",
    "        cv2.imshow('Gathering Training Data', face)\n",
    "    else:\n",
    "        print(\"No face found\")\n",
    "        pass\n",
    "    if cv2.waitKey(1)==13:\n",
    "        break\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "Labels = np.asarray(Labels, dtype=np.int32)\n",
    "print(\"Dataset Generated\")\n",
    "    \n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model trained sucessefully\n"
     ]
    }
   ],
   "source": [
    "#Training our face detection model\n",
    "model  = cv2.face_LBPHFaceRecognizer.create() \n",
    "model.train(np.asarray(Training_Data), np.asarray(Labels))\n",
    "print(\"Model trained sucessefully\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "<ipython-input-3-e55c0a8a97be>:9: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
      "  if faces is ():\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instance Launched successfully\n",
      "An EBS volume of size 5gb has been created\n"
     ]
    }
   ],
   "source": [
    "#Testing face recognition model \n",
    "import os\n",
    "\n",
    "def face_detector(img, size=0.5):\n",
    "    \n",
    "    # Convert image to grayscale\n",
    "    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "    faces = face_det.detectMultiScale(gray, 1.3, 5)\n",
    "    if faces is ():\n",
    "        return img, []\n",
    "    \n",
    "    \n",
    "    for (x,y,w,h) in faces:\n",
    "        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),2)\n",
    "        roi = img[y:y+h, x:x+w]\n",
    "        roi = cv2.resize(roi, (200, 200))\n",
    "    return img, roi\n",
    "\n",
    "\n",
    "# Open Webcam\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "while True:\n",
    "\n",
    "    ret, frame = cap.read()\n",
    "    image, face = face_detector(frame)\n",
    "    try:\n",
    "        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "        results = model.predict(face)\n",
    "        \n",
    "        if results[1] < 500:\n",
    "            confidence = int( 100 * (1 - (results[1])/400) )\n",
    "            disp_text = str(confidence) + '% Confident it is User'\n",
    "            \n",
    "        cv2.putText(image, disp_text, (100, 120), cv2.FONT_HERSHEY_COMPLEX, 1, (255,100,100), 2)\n",
    "        \n",
    "        if confidence > 90:\n",
    "            cv2.putText(image, \"Hey Michael Scott :)\", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,255), 2)\n",
    "            cv2.imshow('Face Recognition', image )\n",
    "        \n",
    "        else:\n",
    "            cv2.putText(image, \"Not sure who you are\", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,255), 2)\n",
    "            cv2.imshow('Face Recognition', image )\n",
    "\n",
    "    except:\n",
    "        cv2.putText(image, \"No Face Detected\", (220, 120) , cv2.FONT_HERSHEY_COMPLEX, 1, (0,111,255), 2)\n",
    "        cv2.putText(image, \"Looking for a face\", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,255), 2)\n",
    "        cv2.imshow('Face Recognition', image )\n",
    "        pass\n",
    "        \n",
    "    if cv2.waitKey(1) == 13:\n",
    "        break\n",
    "    \n",
    "        \n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n",
    "\n",
    "#Launching an ec2 instance and a 5GB instance volume if second face is recognized:\n",
    "if confidence > 90:\n",
    "    #for launching instance\n",
    "    os.system(\"aws ec2 run-instances  --image-id ami-06a0b4e3b7eb7a300  --instance-type t2.micro  --count 1  --subnet-id subnet-9a0863d6  --security-group-ids sg-27572745  --key-name os1key\")\n",
    "    print(\"Instance Launched successfully\")\n",
    "    \n",
    "    #for launching 5GB EBS Volume\n",
    "    os.system(\"aws ec2 create-volume  --availability-zone ap-south-1b  --size 5  --volume-type gp2\")\n",
    "    print(\"An EBS volume of size 5gb has been created\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#attaching the EBS Volume to the EC2 Instance we just launched\n",
    "os.system(\"aws ec2 attach-volume --volume-id vol-0d39a4a976d930663 --instance-id i-01a58b61649efe52d --device /dev/xvdf\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
33,314 task-6_face_recognition-main/haarcascade_frontalface_default.xml

Large diffs are not rendered by default.
1 task-6_face_recognition-main/pywhatkit_dbs.txt
@@ -0,0 +1 @@
--------------------
160 task-6_face_recognition-main/test.ipynb
@@ -0,0 +1,160 @@
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fcdb32c7",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "EOL while scanning string literal (<ipython-input-3-ec210c4faa70>, line 65)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-3-ec210c4faa70>\"\u001b[1;36m, line \u001b[1;32m65\u001b[0m\n\u001b[1;33m    print(\"Message id : \" + message.sid)@gmail.com\"\u001b[0m\n\u001b[1;37m                                                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m EOL while scanning string literal\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np  \n",
    "import time\n",
    "\n",
    "def mail():\n",
    "    import smtplib\n",
    "    import imghdr\n",
    "    from email.message import EmailMessage\n",
    "\n",
    "    #type here your email address\n",
    "    Sender_Email = \"import cv2\"\n",
    "import numpy as np  \n",
    "import time\n",
    "\n",
    "def mail():\n",
    "    import smtplib\n",
    "    import imghdr\n",
    "    from email.message import EmailMessage\n",
    "\n",
    "    #type here your email address\n",
    "    Sender_Email = \"berohit40@gmail.com\"\n",
    "    Password = \"bhabha123\" #your password of generate this application password from your gmail account\n",
    "    \n",
    "    \n",
    "    #type here recievers email address.\n",
    "    Reciever_Email=\"muditmathur121@gmail.com\"\n",
    " \n",
    "\n",
    "    newMessage = EmailMessage()                         \n",
    "    newMessage['Subject'] = \"Alert Message.\" \n",
    "    newMessage['From'] = Sender_Email                   \n",
    "    newMessage['To'] = Reciever_Email                   \n",
    "    newMessage.set_content('Security alert: face Detected. Someone is trying to use your system please check the face..') \n",
    "\n",
    "    with open('./faces/ronaldo/1.jpg', 'rb') as f:\n",
    "        image_data = f.read()\n",
    "        image_type = imghdr.what(f.name)\n",
    "        image_name = f.name\n",
    "\n",
    "    newMessage.add_attachment(image_data, maintype='image', subtype=image_type, filename=image_name)\n",
    "\n",
    "    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:\n",
    "\n",
    "        smtp.login(Sender_Email, Password)              \n",
    "        smtp.send_message(newMessage) \n",
    "\n",
    "    print(\"\\t\\t\\t\\n======================= Mail Sent Successfully  ==================================\\n\")\n",
    "    \n",
    "\n",
    "def whatsapp():\n",
    "    \n",
    "    from twilio.rest import Client \n",
    "\n",
    "    account_sid = 'AC1fbe175cdc053d4041550498176e2540' \n",
    "    auth_token = '06f711d33b440c40f93bc3a8e21a1a83' \n",
    "    client = Client(account_sid, auth_token) \n",
    "\n",
    "    message = client.messages.create( \n",
    "                                  from_='whatsapp:+917339817671',  \n",
    "                                  body='Happy Alert!! Ronaldo was trying to use you system apps',      \n",
    "                                  to='whatsapp:+919664343800' \n",
    "                              ) \n",
    "\n",
    "    print(\"Message Sent Successfully..\")\n",
    "    print(\"Message id : \" + message.sid)@gmail.com\"\n",
    "    Password = \"bhabha1123\" #your password of generate this application password from your gmail account\n",
    "    \n",
    "    \n",
    "    #type here recievers email address.\n",
    "    Reciever_Email=\"muditmathur121@gmail.com\"\n",
    " \n",
    "\n",
    "    newMessage = EmailMessage()                         \n",
    "    newMessage['Subject'] = \"Alert Message.\" \n",
    "    newMessage['From'] = Sender_Email                   \n",
    "    newMessage['To'] = Reciever_Email                   \n",
    "    newMessage.set_content('Security alert: face Detected. Someone is trying to use your system please check the face..') \n",
    "\n",
    "    with open('./faces/ronaldo/1.jpg', 'rb') as f:\n",
    "        image_data = f.read()\n",
    "        image_type = imghdr.what(f.name)\n",
    "        image_name = f.name\n",
    "\n",
    "    newMessage.add_attachment(image_data, maintype='image', subtype=image_type, filename=image_name)\n",
    "\n",
    "    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:\n",
    "\n",
    "        smtp.login(Sender_Email, Password)              \n",
    "        smtp.send_message(newMessage) \n",
    "\n",
    "    print(\"\\t\\t\\t\\n======================= Mail Sent Successfully  ==================================\\n\")\n",
    "    \n",
    "\n",
    "def whatsapp():\n",
    "    \n",
    "    from twilio.rest import Client \n",
    "\n",
    "    account_sid = 'AC1fbe175cdc053d4041550498176e2540' \n",
    "    auth_token = '06f711d33b440c40f93bc3a8e21a1a83' \n",
    "    client = Client(account_sid, auth_token) \n",
    "\n",
    "    message = client.messages.create( \n",
    "                                  from_='whatsapp:+917339817671',  \n",
    "                                  body='Happy Alert!! sachin was trying to use you system apps',      \n",
    "                                  to='whatsapp:+919664343800' \n",
    "                              ) \n",
    "\n",
    "    print(\"Message Sent Successfully..\")\n",
    "    print(\"Message id : \" + message.sid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96510c9e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
